{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anton\\\\Desktop\\\\React\\\\movies-react\\\\movies-react\\\\src\\\\containers\\\\movie-info-page\\\\movie-info-page.tsx\";\nimport React, { Fragment } from 'react';\nimport { MovieInfo } from '../../components/movie-info/movie-info';\nimport FilmsContent from '../films-content/films-content';\nimport { Footer } from '../../components/footer/footer';\nimport { PageNotFound } from '../../components/page-not-found/page-not-found';\nimport { http } from '../../services/httpRequest';\nimport { CONSTANTS } from '../../constants/constants';\nimport { selectedMovie, getMovies, getUnsortedMovies, changeLoadingStatus } from '../../actions/movies-actions';\nimport { connect } from 'react-redux';\nexport class MovieInfoPage extends React.Component {\n  componentDidMount() {\n    if (!this.props.selectedMovie) {\n      const id = this.props.match.params.id;\n      http(CONSTANTS.URL_FILMS + `/${id}`).then(movie => {\n        if (movie.title) {\n          this.props.dispatch(selectedMovie(movie));\n          const url = `?search=${movie.genres[0]}&searchBy=genres`;\n          http(CONSTANTS.URL_FILMS + url).then(res => {\n            this.props.dispatch(getMovies([...res.data]));\n            this.props.dispatch(getUnsortedMovies([...res.data]));\n          });\n        }\n      }).finally(() => this.props.dispatch(changeLoadingStatus(false)));\n    }\n  }\n\n  backToMainPage() {\n    this.props.dispatch(changeLoadingStatus(false));\n    this.props.dispatch(getUnsortedMovies([...this.props.movies]));\n  }\n\n  render() {\n    if (!isNaN(+this.props.match.params.id)) {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(MovieInfo, {\n        backToMainPage: this.backToMainPage.bind(this),\n        selectedMovie: this.props.selectedMovie,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), React.createElement(FilmsContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(PageNotFound, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    selectedMovie: state.selectedMovie,\n    movies: state.movies\n  };\n}\n\nexport default connect(mapStateToProps)(MovieInfoPage);","map":{"version":3,"sources":["C:/Users/Anton/Desktop/React/movies-react/movies-react/src/containers/movie-info-page/movie-info-page.tsx"],"names":["React","Fragment","MovieInfo","FilmsContent","Footer","PageNotFound","http","CONSTANTS","selectedMovie","getMovies","getUnsortedMovies","changeLoadingStatus","connect","MovieInfoPage","Component","componentDidMount","props","id","match","params","URL_FILMS","then","movie","title","dispatch","url","genres","res","data","finally","backToMainPage","movies","render","isNaN","bind","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\r\nimport { MovieInfo } from '../../components/movie-info/movie-info';\r\nimport FilmsContent from '../films-content/films-content';\r\nimport { Footer } from '../../components/footer/footer';\r\nimport { PageNotFound } from '../../components/page-not-found/page-not-found';\r\nimport { http } from '../../services/httpRequest';\r\nimport { CONSTANTS } from '../../constants/constants';\r\nimport { Movie } from '../../types/movie';\r\nimport {\r\n    selectedMovie,\r\n    getMovies,\r\n    getUnsortedMovies,\r\n    changeLoadingStatus,\r\n} from '../../actions/movies-actions';\r\nimport { MoviesResponse } from '../../types/httpType';\r\nimport { connect } from 'react-redux';\r\nimport { State } from '../../types/state';\r\n\r\ninterface Props {\r\n    selectedMovie: Movie;\r\n    movies: Movie[];\r\n}\r\n\r\ninterface PropsWithMatch extends Props {\r\n    match: any;\r\n    dispatch: (action: any) => void;\r\n}\r\n\r\nexport class MovieInfoPage extends React.Component<PropsWithMatch> {\r\n    componentDidMount(): void {\r\n        if (!this.props.selectedMovie) {\r\n            const id = this.props.match.params.id;\r\n\r\n            http(CONSTANTS.URL_FILMS + `/${id}`)\r\n                .then((movie: Movie) => {\r\n                    if (movie.title) {\r\n                        this.props.dispatch(selectedMovie(movie));\r\n\r\n                        const url = `?search=${movie.genres[0]}&searchBy=genres`;\r\n\r\n                        http(CONSTANTS.URL_FILMS + url).then(\r\n                            (res: MoviesResponse) => {\r\n                                this.props.dispatch(getMovies([...res.data]));\r\n                                this.props.dispatch(\r\n                                    getUnsortedMovies([...res.data])\r\n                                );\r\n                            }\r\n                        );\r\n                    }\r\n                })\r\n                .finally(() => this.props.dispatch(changeLoadingStatus(false)));\r\n        }\r\n    }\r\n\r\n    backToMainPage(): void {\r\n        this.props.dispatch(changeLoadingStatus(false));\r\n        this.props.dispatch(getUnsortedMovies([...this.props.movies]));\r\n    }\r\n    render() {\r\n        if (!isNaN(+this.props.match.params.id)) {\r\n            return (\r\n                <Fragment>\r\n                    <MovieInfo\r\n                        backToMainPage={this.backToMainPage.bind(this)}\r\n                        selectedMovie={this.props.selectedMovie}\r\n                    />\r\n                    <FilmsContent />\r\n                    <Footer />\r\n                </Fragment>\r\n            );\r\n        } else {\r\n            return <PageNotFound />;\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: State): Props {\r\n    return {\r\n        selectedMovie: state.selectedMovie as Movie,\r\n        movies: state.movies,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(MovieInfoPage);\r\n"]},"metadata":{},"sourceType":"module"}