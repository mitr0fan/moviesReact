{"version":3,"file":"static/webpack/static\\development\\pages\\movie.js.b4aa1571ad2083afff45.hot-update.js","sources":["webpack:///./src/pages/movie/index.tsx"],"sourcesContent":["import React, { Fragment } from 'react';\r\nimport { MovieInfo } from '../movie-info/movie-info';\r\nimport FilmsContent from '../films-content/films-content';\r\nimport { Footer } from '../../components/footer/footer';\r\nimport { PageNotFound } from '../page-not-found/page-not-found';\r\nimport { http } from '../../services/httpRequest';\r\nimport { CONSTANTS } from '../../constants/constants';\r\nimport { Movie } from '../../types/movie';\r\nimport {\r\n    selectedMovie,\r\n    getMovies,\r\n    getUnsortedMovies,\r\n    changeLoadingStatus,\r\n} from '../../actions/movies-actions';\r\nimport { MoviesResponse } from '../../types/httpType';\r\nimport { connect } from 'react-redux';\r\nimport { State } from '../../types/state';\r\nimport { Loading } from '../../components/loading/loading';\r\n\r\ninterface Props {\r\n    selectedMovie: Movie;\r\n    movies: Movie[];\r\n    loadingStatus: boolean;\r\n}\r\n\r\ninterface PropsWithMatch extends Props {\r\n    match: any;\r\n    dispatch: (action: any) => void;\r\n    query: {id: string};\r\n}\r\n\r\nexport class MovieInfoPage extends React.Component<PropsWithMatch> {\r\n\r\n    static getInitialProps({store, query}: any) {\r\n        return {store, query}\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (!this.props.selectedMovie) {\r\n            const id = this.props.query.id;\r\n\r\n            http(CONSTANTS.URL_FILMS + `/${id}`)\r\n                .then((movie: Movie) => {\r\n                    if (movie.title) {\r\n                        this.props.dispatch(selectedMovie(movie));\r\n\r\n                        const url = `?search=${movie.genres[0]}&searchBy=genres`;\r\n\r\n                        http(CONSTANTS.URL_FILMS + url).then(\r\n                            (res: MoviesResponse) => {\r\n                                this.props.dispatch(getMovies([...res.data]));\r\n                                this.props.dispatch(\r\n                                    getUnsortedMovies([...res.data])\r\n                                );\r\n                            }\r\n                        );\r\n                    }\r\n                })\r\n                .finally(() => this.props.dispatch(changeLoadingStatus(false)));\r\n        }\r\n    }\r\n\r\n    backToMainPage(): void {\r\n        this.props.dispatch(changeLoadingStatus(false));\r\n        this.props.dispatch(getUnsortedMovies([...this.props.movies]));\r\n    }\r\n\r\n    loading() {\r\n        if(this.props.loadingStatus) {\r\n            return <Loading />\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!isNaN(+this.props.query.id)) {\r\n            return (\r\n                <Fragment>\r\n                    {this.loading()}\r\n                    <MovieInfo\r\n                        backToMainPage={this.backToMainPage.bind(this)}\r\n                        selectedMovie={this.props.selectedMovie}\r\n                    />\r\n                    <FilmsContent />\r\n                    <Footer />\r\n                </Fragment>\r\n            );\r\n        } else {\r\n            return <PageNotFound />;\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: State): Props {\r\n    return {\r\n        selectedMovie: state.selectedMovie as Movie,\r\n        movies: state.movies,\r\n        loadingStatus: state.loadingStatus\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(MovieInfoPage);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAEA;AAcA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AA3DA;AACA;AA4DA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;;;;A","sourceRoot":""}