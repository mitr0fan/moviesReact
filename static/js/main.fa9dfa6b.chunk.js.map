{"version":3,"sources":["components/loading/loading.tsx","components/error-boundary/error-boundary.tsx","actions/movies-actions.ts","constants/actionTypes.ts","constants/constants.ts","services/httpRequest.ts","components/amount-and-sort-panel/amount-and-sort-panel.tsx","containers/header/header.tsx","components/film/film.tsx","containers/films-content/films-content.tsx","components/footer/footer.tsx","components/main-page/main-page.tsx","components/page-not-found/page-not-found.tsx","components/movie-info/movie-info.tsx","containers/movie-info-page/movie-info-page.tsx","App.tsx","serviceWorker.ts","reducers/movies-reducer.ts","index.tsx"],"names":["Loading","className","viewBox","cx","cy","r","fill","strokeWidth","React","Component","ErrorBoundary","props","state","hasError","error","this","setState","name","to","onClick","deleteError","children","getMovies","movies","type","payload","changeSearchType","getUnsortedMovies","changeSortType","selectedMovie","movie","changeLoadingStatus","status","CONSTANTS","http","url","store","dispatch","fetch","then","response","json","console","warn","AmountAndSortPanel","count","sortType","sortBy","Header","inputValue","handlerInput","bind","event","element","target","value","searchType","res","data","finally","sort","a","b","Date","release_date","getTime","vote_average","sortFunction","unsortedMovies","onChange","searchByTitle","searchByGenre","handlerSearchButton","length","connect","Film","id","selectMovie","src","poster_path","alt","title","slice","genres","join","FilmsContent","selectMovieId","interval","setInterval","window","scrollBy","scrollY","clearInterval","map","key","toString","Footer","date","getFullYear","MainPage","PageNotFound","MovieInfo","backToMainPage","runtime","overview","MovieInfoPage","match","params","isNaN","App","loadingStatus","loadingComponent","path","exact","component","Boolean","location","hostname","initiaiState","movieId","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fa9dfa6b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './loading.scss';\r\n\r\nexport class Loading extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"loading\">\r\n                <svg className=\"spinner\" viewBox=\"0 0 50 50\">\r\n                    <circle\r\n                        className=\"path\"\r\n                        cx=\"25\"\r\n                        cy=\"25\"\r\n                        r=\"20\"\r\n                        fill=\"none\"\r\n                        strokeWidth=\"5\"\r\n                    ></circle>\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './error-boundary.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport class ErrorBoundary extends React.Component<\r\n    {},\r\n    { hasError: boolean; error: any }\r\n> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false,\r\n            error: null,\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromError(error: any) {\r\n        return {\r\n            hasError: true,\r\n            error,\r\n        };\r\n    }\r\n\r\n    deleteError() {\r\n        this.setState({\r\n            hasError: false,\r\n            error: null,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return (\r\n                <div className=\"error\">\r\n                    {this.state.error.name}\r\n                    <Link to=\"/\">\r\n                        <button\r\n                            className=\"button\"\r\n                            onClick={() => this.deleteError()}\r\n                        >\r\n                            Back to main page\r\n                        </button>\r\n                    </Link>\r\n                </div>\r\n            );\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n","import * as TYPES from '../constants/actionTypes';\r\nimport { Movie } from '../types/movie';\r\nimport { Action } from '../types/action';\r\n\r\nexport function getMovies(movies: Movie[]): Action {\r\n    return {\r\n        type: TYPES.GET_MOVIES,\r\n        payload: movies,\r\n    };\r\n}\r\n\r\nexport function changeSearchType(type: string): Action {\r\n    return {\r\n        type: TYPES.CHANGE_SEARCH_TYPE,\r\n        payload: type,\r\n    };\r\n}\r\n\r\nexport function getUnsortedMovies(movies: Movie[]): Action {\r\n    return {\r\n        type: TYPES.GET_UNSORTED_MOVIES,\r\n        payload: movies,\r\n    };\r\n}\r\n\r\nexport function changeSortType(type: string): Action {\r\n    return {\r\n        type: TYPES.CHANGE_SORT_TYPE,\r\n        payload: type,\r\n    };\r\n}\r\n\r\nexport function selectMovieId(id: number): Action {\r\n    return {\r\n        type: TYPES.SELECT_MOVIE_ID,\r\n        payload: id,\r\n    };\r\n}\r\n\r\nexport function selectedMovie(movie: Movie): Action {\r\n    return {\r\n        type: TYPES.SELECTED_MOVIE,\r\n        payload: movie,\r\n    };\r\n}\r\n\r\nexport function changeLoadingStatus(status: boolean): Action {\r\n    return {\r\n        type: TYPES.CHANGE_LOADING_STATUS,\r\n        payload: status,\r\n    };\r\n}\r\n","export const GET_MOVIES = 'GET_MOVIES';\r\nexport const SELECT_MOVIE_ID = 'SELECT_MOVIE_ID';\r\nexport const SELECTED_MOVIE = 'SELECT_MOVIE';\r\nexport const SEARCH_MOVIES = 'SEARCH_MOVIES';\r\nexport const CHANGE_SEARCH_TYPE = 'CHANGE_SEARCH_TYPE';\r\nexport const GET_UNSORTED_MOVIES = 'GET_UNSORTED_MOVIES';\r\nexport const CHANGE_SORT_TYPE = 'CHANGE_SORT_TYPE';\r\nexport const CHANGE_LOADING_STATUS = 'CHANGE_LOADING_STATUS';\r\n","export const CONSTANTS = {\r\n    URL_FILMS: 'https://reactjs-cdp.herokuapp.com/movies',\r\n    SEARCH_BY_TITLE_STATE: 'title',\r\n    SEARCH_BY_GENRE_STATE: 'genres',\r\n    SORT_BY_RATING: 'rating',\r\n    SORT_BY_DATE: 'date',\r\n};\r\n","import { store } from '..';\r\nimport { changeLoadingStatus } from '../actions/movies-actions';\r\n\r\nexport function http(url: string): Promise<any> {\r\n    store.dispatch(changeLoadingStatus(true));\r\n    return fetch(url).then(\r\n        (response) => response.json(),\r\n        (error) => console.warn(error)\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './amount-and-sort-panel.scss';\r\nimport { CONSTANTS } from '../../constants/constants';\r\n\r\ntype Props = {\r\n    count: number;\r\n    sortType: string;\r\n    sortBy: (p: string) => any;\r\n};\r\n\r\nexport class AmountAndSortPanel extends React.Component<Props> {\r\n    render() {\r\n        return (\r\n            <div className=\"amount-panel\">\r\n                <div className=\"panel-container\">\r\n                    <span className=\"amount-panel__count\">\r\n                        {this.props.count} movies found\r\n                    </span>\r\n                    <span>Sort by</span>\r\n                    <div\r\n                        className={\r\n                            this.props.sortType === 'date'\r\n                                ? 'amount-panel__sort-date amount-panel__sort-date_active'\r\n                                : 'amount-panel__sort-date'\r\n                        }\r\n                        onClick={() =>\r\n                            this.props.sortBy(CONSTANTS.SORT_BY_DATE)\r\n                        }\r\n                    >\r\n                        release date\r\n                    </div>\r\n                    <div\r\n                        className={\r\n                            this.props.sortType === 'rating'\r\n                                ? 'amount-panel__sort-rating amount-panel__sort-rating_active'\r\n                                : 'amount-panel__sort-rating'\r\n                        }\r\n                        onClick={() =>\r\n                            this.props.sortBy(CONSTANTS.SORT_BY_RATING)\r\n                        }\r\n                    >\r\n                        rating\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Fragment, SyntheticEvent } from 'react';\r\nimport './header.scss';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    changeSearchType,\r\n    getMovies,\r\n    changeSortType,\r\n    getUnsortedMovies,\r\n    changeLoadingStatus,\r\n} from '../../actions/movies-actions';\r\nimport { CONSTANTS } from '../../constants/constants';\r\nimport { http } from '../../services/httpRequest';\r\nimport { AmountAndSortPanel } from '../../components/amount-and-sort-panel/amount-and-sort-panel';\r\nimport { Movie } from '../../types/movie';\r\nimport { MoviesResponse } from '../../types/httpType';\r\nimport { State } from '../../types/state';\r\n\r\ninterface Props {\r\n    searchType: string;\r\n    movies: Movie[];\r\n    unsortedMovies: Movie[];\r\n    sortType: string;\r\n    dispatch: (action: any) => any;\r\n}\r\n\r\nclass Header extends React.Component<Props> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.handlerInput = this.handlerInput.bind(this);\r\n        this.sortBy = this.sortBy.bind(this);\r\n    }\r\n\r\n    inputValue: string = '';\r\n\r\n    handlerInput(event: SyntheticEvent) {\r\n        const element = event.target as HTMLInputElement;\r\n        this.inputValue = element.value;\r\n    }\r\n\r\n    handlerSearchButton(): void {\r\n        const url = `?search=${this.inputValue}&searchBy=${this.props.searchType}`;\r\n\r\n        http(CONSTANTS.URL_FILMS + url)\r\n            .then((res: MoviesResponse) => {\r\n                this.props.dispatch(getMovies([...res.data]));\r\n\r\n                this.props.dispatch(getUnsortedMovies([...res.data]));\r\n\r\n                if (this.props.sortType !== '') {\r\n                    this.props.dispatch(changeSortType(''));\r\n                }\r\n            })\r\n            .finally(() => this.props.dispatch(changeLoadingStatus(false)));\r\n    }\r\n\r\n    searchByTitle(): void {\r\n        this.props.dispatch(changeSearchType(CONSTANTS.SEARCH_BY_TITLE_STATE));\r\n    }\r\n\r\n    searchByGenre(): void {\r\n        this.props.dispatch(changeSearchType(CONSTANTS.SEARCH_BY_GENRE_STATE));\r\n    }\r\n\r\n    sortFunction(sortType: string): Movie[] | void {\r\n        if (sortType === CONSTANTS.SORT_BY_DATE) {\r\n            return this.props.movies.sort((a: any, b: any) => {\r\n                return (\r\n                    new Date(b.release_date).getTime() -\r\n                    new Date(a.release_date).getTime()\r\n                );\r\n            });\r\n        }\r\n        if (sortType === CONSTANTS.SORT_BY_RATING) {\r\n            return this.props.movies.sort((a: any, b: any) => {\r\n                return b.vote_average - a.vote_average;\r\n            });\r\n        }\r\n    }\r\n\r\n    sortBy(sortType: string): void {\r\n        if (this.props.sortType !== sortType) {\r\n            this.props.dispatch(changeSortType(sortType));\r\n\r\n            const movies = this.sortFunction(sortType);\r\n\r\n            this.props.dispatch(getMovies([...(movies as Movie[])]));\r\n        } else {\r\n            this.props.dispatch(changeSortType(''));\r\n\r\n            this.props.dispatch(getMovies([...this.props.unsortedMovies]));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <header className=\"header\">\r\n                    <div className=\"header__content\">\r\n                        <span className=\"header__app-name\">Movies</span>\r\n                        <span className=\"header__input-name\">\r\n                            Find your movie\r\n                        </span>\r\n                        <div className=\"header__input-field\">\r\n                            <input\r\n                                className=\"header__input\"\r\n                                type=\"text\"\r\n                                onChange={this.handlerInput}\r\n                            ></input>\r\n                        </div>\r\n                        <div className=\"header__buttons\">\r\n                            <span>SEARCH BY</span>\r\n                            <button\r\n                                className={\r\n                                    this.props.searchType === 'title'\r\n                                        ? 'button button_active'\r\n                                        : 'button'\r\n                                }\r\n                                onClick={() => this.searchByTitle()}\r\n                            >\r\n                                TITLE\r\n                            </button>\r\n                            <button\r\n                                className={\r\n                                    this.props.searchType === 'genres'\r\n                                        ? 'button button_active'\r\n                                        : 'button'\r\n                                }\r\n                                onClick={() => this.searchByGenre()}\r\n                            >\r\n                                GENRE\r\n                            </button>\r\n                            <div className=\"empty\"></div>\r\n                            <button\r\n                                className=\"button button_search\"\r\n                                onClick={() => this.handlerSearchButton()}\r\n                            >\r\n                                SEARCH\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </header>\r\n                <AmountAndSortPanel\r\n                    count={this.props.movies.length}\r\n                    sortBy={this.sortBy}\r\n                    sortType={this.props.sortType}\r\n                />\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: State) {\r\n    return {\r\n        searchType: state.searchType,\r\n        movies: state.movies,\r\n        unsortedMovies: state.unsortedMovies,\r\n        sortType: state.sortType,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Header);\r\n","import React from 'react';\r\nimport './film.scss';\r\nimport { Movie } from '../../types/movie';\r\nimport { Link } from 'react-router-dom';\r\n\r\ntype Props = {\r\n    key: string;\r\n    movie: Movie;\r\n    selectMovie: (id: number) => void;\r\n};\r\n\r\nexport class Film extends React.Component<Props> {\r\n    render() {\r\n        const movie = this.props.movie;\r\n        return (\r\n            <Link to={`/movie/${movie.id}`}>\r\n                <div\r\n                    className=\"film-item\"\r\n                    onClick={() => this.props.selectMovie(movie.id)}\r\n                >\r\n                    <img\r\n                        src={movie.poster_path}\r\n                        className=\"film-item__poster\"\r\n                        alt=\"Poster\"\r\n                    />\r\n                    <span className=\"film-item__title\">{movie.title}</span>\r\n                    <span className=\"film-item__release\">\r\n                        {movie.release_date.slice(0, 4)}\r\n                    </span>\r\n                    <span className=\"film-item__genres\">\r\n                        {movie.genres.join(' & ')}\r\n                    </span>\r\n                </div>\r\n            </Link>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './films-content.scss';\r\nimport { Film } from '../../components/film/film';\r\nimport { http } from '../../services/httpRequest';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    getMovies,\r\n    getUnsortedMovies,\r\n    selectMovieId,\r\n    selectedMovie,\r\n    changeSortType,\r\n    changeLoadingStatus,\r\n} from '../../actions/movies-actions';\r\nimport { MoviesResponse } from '../../types/httpType';\r\nimport { Movie } from '../../types/movie';\r\nimport { State } from '../../types/state';\r\nimport { CONSTANTS } from '../../constants/constants';\r\nimport FlipMove from 'react-flip-move';\r\n\r\ninterface Props extends React.Props<any> {\r\n    movies: Movie[];\r\n    dispatch: (action: any) => any;\r\n    selectedMovie: Movie | null;\r\n}\r\n\r\nfunction mapStateToProps(state: State) {\r\n    return {\r\n        movies: state.movies,\r\n        selectedMovie: state.selectedMovie,\r\n    };\r\n}\r\n\r\nclass FilmsContent extends React.Component<Props> {\r\n    componentDidMount() {\r\n        if (!this.props.selectedMovie) {\r\n            http(CONSTANTS.URL_FILMS)\r\n                .then((res: MoviesResponse) => {\r\n                    this.props.dispatch(getMovies([...res.data]));\r\n                    this.props.dispatch(getUnsortedMovies([...res.data]));\r\n                })\r\n                .finally(() => this.props.dispatch(changeLoadingStatus(false)));\r\n        }\r\n    }\r\n\r\n    selectMovie(id: number) {\r\n        this.props.dispatch(changeSortType(''));\r\n        this.props.dispatch(selectMovieId(id));\r\n\r\n        const url = `/${id}`;\r\n        http(CONSTANTS.URL_FILMS + url)\r\n            .then((movie: Movie) => {\r\n                this.props.dispatch(selectedMovie(movie));\r\n\r\n                const url = `?search=${movie.genres[0]}&searchBy=${CONSTANTS.SEARCH_BY_GENRE_STATE}`;\r\n\r\n                http(CONSTANTS.URL_FILMS + url).then((res) => {\r\n                    this.props.dispatch(getMovies([...res.data]));\r\n                    this.props.dispatch(getUnsortedMovies([...res.data]));\r\n                });\r\n            })\r\n            .finally(() => this.props.dispatch(changeLoadingStatus(false)));\r\n\r\n        const interval = setInterval(() => {\r\n            window.scrollBy(0, -70);\r\n            if (window.scrollY === 0) {\r\n                clearInterval(interval);\r\n            }\r\n        }, 1000 / 60);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.movies.length > 0) {\r\n            return (\r\n                <FlipMove className=\"films-container\">\r\n                    {this.props.movies.map((movie: any) => (\r\n                        <Film\r\n                            key={movie.id.toString()}\r\n                            movie={movie}\r\n                            selectMovie={this.selectMovie.bind(this)}\r\n                        />\r\n                    ))}\r\n                </FlipMove>\r\n            );\r\n        } else {\r\n            return <div className=\"films-container\">FILMS NOT FOUND</div>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(FilmsContent);\r\n","import React from 'react';\r\nimport './footer.scss';\r\n\r\nexport class Footer extends React.Component {\r\n    render() {\r\n        const date = new Date().getFullYear();\r\n        return (\r\n            <div className=\"container-footer\">\r\n                <footer className=\"footer\">Movies, {date}</footer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport Header from '../../containers/header/header';\r\nimport FilmsContent from '../../containers/films-content/films-content';\r\nimport { Footer } from '../footer/footer';\r\n\r\nexport class MainPage extends React.Component {\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Header />\r\n                <FilmsContent />\r\n                <Footer />\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './page-not-found.scss';\r\n\r\nexport class PageNotFound extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"error\">\r\n                PAGE NOT FOUND\r\n                <Link to=\"/\">\r\n                    <button className=\"button\">Back to main page</button>\r\n                </Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport './movie-info.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport { Movie } from '../../types/movie';\r\nimport { PageNotFound } from '../page-not-found/page-not-found';\r\n\r\ninterface Props {\r\n    selectedMovie: Movie;\r\n    backToMainPage: () => void;\r\n}\r\n\r\nexport class MovieInfo extends React.Component<Props> {\r\n    render() {\r\n        const movie = this.props.selectedMovie;\r\n        return !!movie ? (\r\n            <Fragment>\r\n                <header className=\"selected-movie\">\r\n                    <div className=\"selected-movie__content\">\r\n                        <div className=\"selected-movie__head\">\r\n                            <span className=\"selected-movie__app-name\">\r\n                                Movies\r\n                            </span>\r\n                            <Link to=\"/\">\r\n                                <button\r\n                                    className=\"button\"\r\n                                    onClick={() => this.props.backToMainPage()}\r\n                                >\r\n                                    SEARCH\r\n                                </button>\r\n                            </Link>\r\n                        </div>\r\n                        <div className=\"selected-movie__content-container\">\r\n                            <img\r\n                                src={movie.poster_path}\r\n                                alt=\"Poster\"\r\n                                className=\"selected-movie__poster\"\r\n                            />\r\n                            <div className=\"selected-movie__info\">\r\n                                <div className=\"selected-movie__title-rating\">\r\n                                    <span className=\"selected-movie__title\">\r\n                                        {movie.title}\r\n                                    </span>\r\n                                    <span className=\"selected-movie__rating\">\r\n                                        {movie.vote_average}\r\n                                    </span>\r\n                                </div>\r\n                                <div className=\"selected-movie__date-duration\">\r\n                                    <span>\r\n                                        {movie.release_date.slice(0, 4)}\r\n                                    </span>\r\n                                    <span>{movie.runtime} min</span>\r\n                                </div>\r\n                                <div className=\"selected-movie__overview\">\r\n                                    {movie.overview}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </header>\r\n                <div className=\"movies-genre\">\r\n                    <div className=\"movies-genre__genre\">\r\n                        Movies by {this.props.selectedMovie.genres[0]} genre\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        ) : (\r\n            <PageNotFound />\r\n        );\r\n    }\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport { MovieInfo } from '../../components/movie-info/movie-info';\r\nimport FilmsContent from '../films-content/films-content';\r\nimport { Footer } from '../../components/footer/footer';\r\nimport { PageNotFound } from '../../components/page-not-found/page-not-found';\r\nimport { http } from '../../services/httpRequest';\r\nimport { CONSTANTS } from '../../constants/constants';\r\nimport { Movie } from '../../types/movie';\r\nimport {\r\n    selectedMovie,\r\n    getMovies,\r\n    getUnsortedMovies,\r\n    changeLoadingStatus,\r\n} from '../../actions/movies-actions';\r\nimport { MoviesResponse } from '../../types/httpType';\r\nimport { connect } from 'react-redux';\r\nimport { State } from '../../types/state';\r\n\r\ninterface Props {\r\n    selectedMovie: Movie;\r\n    movies: Movie[];\r\n}\r\n\r\ninterface PropsWithMatch extends Props {\r\n    match: any;\r\n    dispatch: (action: any) => void;\r\n}\r\n\r\nexport class MovieInfoPage extends React.Component<PropsWithMatch> {\r\n    componentDidMount(): void {\r\n        if (!this.props.selectedMovie) {\r\n            const id = this.props.match.params.id;\r\n\r\n            http(CONSTANTS.URL_FILMS + `/${id}`)\r\n                .then((movie: Movie) => {\r\n                    if (movie.title) {\r\n                        this.props.dispatch(selectedMovie(movie));\r\n\r\n                        const url = `?search=${movie.genres[0]}&searchBy=genres`;\r\n\r\n                        http(CONSTANTS.URL_FILMS + url).then(\r\n                            (res: MoviesResponse) => {\r\n                                this.props.dispatch(getMovies([...res.data]));\r\n                                this.props.dispatch(\r\n                                    getUnsortedMovies([...res.data])\r\n                                );\r\n                            }\r\n                        );\r\n                    }\r\n                })\r\n                .finally(() => this.props.dispatch(changeLoadingStatus(false)));\r\n        }\r\n    }\r\n\r\n    backToMainPage(): void {\r\n        this.props.dispatch(changeLoadingStatus(false));\r\n        this.props.dispatch(getUnsortedMovies([...this.props.movies]));\r\n    }\r\n    render() {\r\n        if (!isNaN(+this.props.match.params.id)) {\r\n            return (\r\n                <Fragment>\r\n                    <MovieInfo\r\n                        backToMainPage={this.backToMainPage.bind(this)}\r\n                        selectedMovie={this.props.selectedMovie}\r\n                    />\r\n                    <FilmsContent />\r\n                    <Footer />\r\n                </Fragment>\r\n            );\r\n        } else {\r\n            return <PageNotFound />;\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: State): Props {\r\n    return {\r\n        selectedMovie: state.selectedMovie as Movie,\r\n        movies: state.movies,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(MovieInfoPage);\r\n","import React from 'react';\r\nimport './app.scss';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { Loading } from './components/loading/loading';\r\nimport { connect } from 'react-redux';\r\nimport { ErrorBoundary } from './components/error-boundary/error-boundary';\r\nimport { MainPage } from './components/main-page/main-page';\r\nimport MovieInfoPage from './containers/movie-info-page/movie-info-page';\r\nimport { PageNotFound } from './components/page-not-found/page-not-found';\r\n\r\nclass App extends React.Component<any> {\r\n    loadingComponent(): JSX.Element | undefined {\r\n        if (this.props.loadingStatus) {\r\n            return <Loading />;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <ErrorBoundary>\r\n                    {this.loadingComponent()}\r\n                    <Switch>\r\n                        <Route path=\"/\" exact component={MainPage} />\r\n                        <Route\r\n                            path=\"/movie/:id\"\r\n                            exact\r\n                            component={MovieInfoPage}\r\n                        />\r\n                        <Route component={PageNotFound} />\r\n                        <Route path=\"/movie/:id/*\" component={PageNotFound} />\r\n                    </Switch>\r\n                </ErrorBoundary>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n    return {\r\n        loadingStatus: state.loadingStatus,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import { Action } from '../types/action';\r\nimport * as types from '../constants/actionTypes';\r\nimport { CONSTANTS } from '../constants/constants';\r\nimport { State } from '../types/state';\r\nimport { Movie } from '../types/movie';\r\n\r\nconst initiaiState: State = {\r\n    movies: [],\r\n    searchType: CONSTANTS.SEARCH_BY_TITLE_STATE,\r\n    unsortedMovies: [],\r\n    sortType: '',\r\n    movieId: null,\r\n    selectedMovie: null,\r\n    loadingStatus: false,\r\n};\r\n\r\nexport function changeMoviesState(\r\n    state: State = initiaiState,\r\n    action: Action\r\n): State {\r\n    switch (action.type) {\r\n        case types.GET_MOVIES:\r\n            return {\r\n                ...state,\r\n                movies: action.payload as Movie[],\r\n            };\r\n        case types.SEARCH_MOVIES:\r\n            return {\r\n                ...state,\r\n                movies: action.payload as Movie[],\r\n            };\r\n        case types.CHANGE_SEARCH_TYPE:\r\n            return {\r\n                ...state,\r\n                searchType: action.payload as string,\r\n            };\r\n        case types.GET_UNSORTED_MOVIES:\r\n            return {\r\n                ...state,\r\n                unsortedMovies: action.payload as Movie[],\r\n            };\r\n        case types.CHANGE_SORT_TYPE:\r\n            return {\r\n                ...state,\r\n                sortType: action.payload as string,\r\n            };\r\n        case types.SELECT_MOVIE_ID:\r\n            return {\r\n                ...state,\r\n                movieId: action.payload as number,\r\n            };\r\n        case types.SELECTED_MOVIE:\r\n            return {\r\n                ...state,\r\n                selectedMovie: action.payload as Movie,\r\n            };\r\n        case types.CHANGE_LOADING_STATUS:\r\n            return {\r\n                ...state,\r\n                loadingStatus: action.payload as boolean,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport { changeMoviesState } from './reducers/movies-reducer';\r\n\r\nexport const store = createStore(changeMoviesState);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}