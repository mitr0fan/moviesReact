{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anton\\\\Desktop\\\\React\\\\movies-react\\\\movies-react\\\\src\\\\pages\\\\_app.tsx\";\nimport App from 'next/app';\nimport { Provider } from 'react-redux';\nimport store from '../store/store';\nimport withRedux from \"next-redux-wrapper\";\nimport React from \"react\";\nimport './movie-info/movie-info.scss';\nimport '../containers/header/header.scss';\nimport '../components/amount-and-sort-panel/amount-and-sort-panel.scss';\nimport { Router } from 'next/router';\nimport { Loading } from '../components/loading/loading';\n\nclass MoviesApp extends App {\n  constructor(...args) {\n    super(...args);\n    this.loadingStatus = true;\n  }\n\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    return {\n      pageProps: { ...(Component.getInitialProps ? await Component.getInitialProps(ctx) : {})\n      }\n    };\n  }\n\n  componentDidMount() {\n    Router.events.on('routeChangeStart', () => this.loadingStatus = true);\n    Router.events.on('routeChangeComplete', () => this.loadingStatus = false);\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props;\n    return React.createElement(React.Fragment, null, () => {\n      if (this.loadingStatus) {\n        return React.createElement(Loading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        });\n      }\n    }, React.createElement(Provider, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(Component, Object.assign({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }))), React.createElement(\"style\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, `\n                    body {\n                        margin: 0;\n                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\n                            'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',\n                            'Helvetica Neue', sans-serif;\n                        -webkit-font-smoothing: antialiased;\n                        -moz-osx-font-smoothing: grayscale;\n                    }\n                `));\n  }\n\n}\n\nconst makeStore = () => store;\n\nexport default withRedux(makeStore)(MoviesApp);","map":{"version":3,"sources":["C:/Users/Anton/Desktop/React/movies-react/movies-react/src/pages/_app.tsx"],"names":["App","Provider","store","withRedux","React","Router","Loading","MoviesApp","loadingStatus","getInitialProps","Component","ctx","pageProps","componentDidMount","events","on","render","props","makeStore"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAGA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,8BAAP;AACA,OAAO,kCAAP;AACA,OAAO,gEAAP;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,OAAT,QAAwB,+BAAxB;;AAMA,MAAMC,SAAN,SAAwBP,GAAxB,CAAwC;AAAA;AAAA;AAAA,SAYpCQ,aAZoC,GAYX,IAZW;AAAA;;AAEpC,eAAaC,eAAb,CAA6B;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,GAA7B,EAAoD;AAEhD,WAAO;AACHC,MAAAA,SAAS,EAAE,EACP,IAAIF,SAAS,CAACD,eAAV,GAA4B,MAAMC,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CAAlC,GAAmE,EAAvE;AADO;AADR,KAAP;AAMH;;AAIDE,EAAAA,iBAAiB,GAAG;AAChBR,IAAAA,MAAM,CAACS,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqC,MAAM,KAAKP,aAAL,GAAqB,IAAhE;AACAH,IAAAA,MAAM,CAACS,MAAP,CAAcC,EAAd,CAAiB,qBAAjB,EAAwC,MAAM,KAAKP,aAAL,GAAqB,KAAnE;AACH;;AAEDQ,EAAAA,MAAM,GAAG;AACL,UAAM;AAACN,MAAAA,SAAD;AAAYE,MAAAA,SAAZ;AAAuBV,MAAAA;AAAvB,QAAgC,KAAKe,KAA3C;AACA,WACI,0CACK,MAAM;AACH,UAAG,KAAKT,aAAR,EAAuB;AACnB,eAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;AACJ,KALL,EAMA,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEN,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD,oBAAeU,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ,CANA,EASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM;;;;;;;;;iBADN,CATA,CADJ;AAwBH;;AA7CmC;;AAgDxC,MAAMM,SAAS,GAAG,MAAMhB,KAAxB;;AAEA,eAAeC,SAAS,CAACe,SAAD,CAAT,CAAqBX,SAArB,CAAf","sourcesContent":["import App from 'next/app';\r\nimport { Provider } from 'react-redux';\r\nimport { NextPageContext } from 'next';\r\nimport { Store } from 'redux';\r\nimport store from '../store/store';\r\nimport withRedux from \"next-redux-wrapper\";\r\nimport React from \"react\";\r\nimport './movie-info/movie-info.scss';\r\nimport '../containers/header/header.scss';\r\nimport '../components/amount-and-sort-panel/amount-and-sort-panel.scss';\r\nimport { Router } from 'next/router';\r\nimport { Loading } from '../components/loading/loading';\r\n\r\ninterface AppContext extends NextPageContext {\r\n    store: Store;\r\n}\r\n\r\nclass MoviesApp extends App<AppContext> {\r\n\r\n    static async getInitialProps({Component, ctx}: any) {\r\n\r\n        return {\r\n            pageProps: {\r\n                ...(Component.getInitialProps ? await Component.getInitialProps(ctx) : {})\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n    loadingStatus: boolean = true;\r\n\r\n    componentDidMount() {\r\n        Router.events.on('routeChangeStart', () => this.loadingStatus = true);\r\n        Router.events.on('routeChangeComplete', () => this.loadingStatus = false);\r\n    }\r\n\r\n    render() {\r\n        const {Component, pageProps, store} = this.props;\r\n        return (\r\n            <>\r\n                {() => {\r\n                    if(this.loadingStatus) {\r\n                        return <Loading />\r\n                    }\r\n                }}\r\n            <Provider store={store}>\r\n                <Component {...pageProps} />\r\n            </Provider>\r\n            <style>\r\n                {`\r\n                    body {\r\n                        margin: 0;\r\n                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\r\n                            'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',\r\n                            'Helvetica Neue', sans-serif;\r\n                        -webkit-font-smoothing: antialiased;\r\n                        -moz-osx-font-smoothing: grayscale;\r\n                    }\r\n                `}\r\n            </style>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst makeStore = () => store as any;\r\n\r\nexport default withRedux(makeStore)(MoviesApp);"]},"metadata":{},"sourceType":"module"}