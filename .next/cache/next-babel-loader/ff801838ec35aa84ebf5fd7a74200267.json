{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anton\\\\Desktop\\\\React\\\\movies-react\\\\movies-react\\\\src\\\\containers\\\\header\\\\header.tsx\";\nimport React, { Fragment } from 'react'; // import './header.scss';\n\nimport { connect } from 'react-redux';\nimport { changeSearchType, getMovies, changeSortType, getUnsortedMovies, changeLoadingStatus } from '../../actions/movies-actions';\nimport { CONSTANTS } from '../../constants/constants';\nimport { http } from '../../services/httpRequest';\nimport { AmountAndSortPanel } from '../../components/amount-and-sort-panel/amount-and-sort-panel';\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputValue = '';\n    this.handlerInput = this.handlerInput.bind(this);\n    this.sortBy = this.sortBy.bind(this);\n  }\n\n  handlerInput(event) {\n    const element = event.target;\n    this.inputValue = element.value;\n  }\n\n  handlerSearchButton() {\n    const url = `?search=${this.inputValue}&searchBy=${this.props.searchType}`;\n    http(CONSTANTS.URL_FILMS + url).then(res => {\n      this.props.dispatch(getMovies([...res.data]));\n      this.props.dispatch(getUnsortedMovies([...res.data]));\n\n      if (this.props.sortType !== '') {\n        this.props.dispatch(changeSortType(''));\n      }\n    }).finally(() => this.props.dispatch(changeLoadingStatus(false)));\n  }\n\n  searchByTitle() {\n    this.props.dispatch(changeSearchType(CONSTANTS.SEARCH_BY_TITLE_STATE));\n  }\n\n  searchByGenre() {\n    this.props.dispatch(changeSearchType(CONSTANTS.SEARCH_BY_GENRE_STATE));\n  }\n\n  sortFunction(sortType) {\n    if (sortType === CONSTANTS.SORT_BY_DATE) {\n      return this.props.movies.sort((a, b) => {\n        return new Date(b.release_date).getTime() - new Date(a.release_date).getTime();\n      });\n    }\n\n    if (sortType === CONSTANTS.SORT_BY_RATING) {\n      return this.props.movies.sort((a, b) => {\n        return b.vote_average - a.vote_average;\n      });\n    }\n  }\n\n  sortBy(sortType) {\n    if (this.props.sortType !== sortType) {\n      this.props.dispatch(changeSortType(sortType));\n      const movies = this.sortFunction(sortType);\n      this.props.dispatch(getMovies([...movies]));\n    } else {\n      this.props.dispatch(changeSortType(''));\n      this.props.dispatch(getMovies([...this.props.unsortedMovies]));\n    }\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header__content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"header__app-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Movies\"), React.createElement(\"span\", {\n      className: \"header__input-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Find your movie\"), React.createElement(\"div\", {\n      className: \"header__input-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"header__input\",\n      type: \"text\",\n      onChange: this.handlerInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"header__buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"SEARCH BY\"), React.createElement(\"button\", {\n      className: this.props.searchType === 'title' ? 'button button_active' : 'button',\n      onClick: () => this.searchByTitle(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"TITLE\"), React.createElement(\"button\", {\n      className: this.props.searchType === 'genres' ? 'button button_active' : 'button',\n      onClick: () => this.searchByGenre(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"GENRE\"), React.createElement(\"div\", {\n      className: \"empty\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"button button_search\",\n      onClick: () => this.handlerSearchButton(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"SEARCH\")))), React.createElement(AmountAndSortPanel, {\n      count: this.props.movies.length,\n      sortBy: this.sortBy,\n      sortType: this.props.sortType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    searchType: state.searchType,\n    movies: state.movies,\n    unsortedMovies: state.unsortedMovies,\n    sortType: state.sortType\n  };\n}\n\nexport default connect(mapStateToProps)(Header);","map":{"version":3,"sources":["C:/Users/Anton/Desktop/React/movies-react/movies-react/src/containers/header/header.tsx"],"names":["React","Fragment","connect","changeSearchType","getMovies","changeSortType","getUnsortedMovies","changeLoadingStatus","CONSTANTS","http","AmountAndSortPanel","Header","Component","constructor","props","inputValue","handlerInput","bind","sortBy","event","element","target","value","handlerSearchButton","url","searchType","URL_FILMS","then","res","dispatch","data","sortType","finally","searchByTitle","SEARCH_BY_TITLE_STATE","searchByGenre","SEARCH_BY_GENRE_STATE","sortFunction","SORT_BY_DATE","movies","sort","a","b","Date","release_date","getTime","SORT_BY_RATING","vote_average","unsortedMovies","render","length","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Fragment, SyntheticEvent } from 'react';\r\n// import './header.scss';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    changeSearchType,\r\n    getMovies,\r\n    changeSortType,\r\n    getUnsortedMovies,\r\n    changeLoadingStatus,\r\n} from '../../actions/movies-actions';\r\nimport { CONSTANTS } from '../../constants/constants';\r\nimport { http } from '../../services/httpRequest';\r\nimport { AmountAndSortPanel } from '../../components/amount-and-sort-panel/amount-and-sort-panel';\r\nimport { Movie } from '../../types/movie';\r\nimport { MoviesResponse } from '../../types/httpType';\r\nimport { State } from '../../types/state';\r\n\r\ninterface Props {\r\n    searchType: string;\r\n    movies: Movie[];\r\n    unsortedMovies: Movie[];\r\n    sortType: string;\r\n    dispatch: (action: any) => any;\r\n}\r\n\r\nclass Header extends React.Component<Props> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.handlerInput = this.handlerInput.bind(this);\r\n        this.sortBy = this.sortBy.bind(this);\r\n    }\r\n\r\n    inputValue: string = '';\r\n\r\n    handlerInput(event: SyntheticEvent) {\r\n        const element = event.target as HTMLInputElement;\r\n        this.inputValue = element.value;\r\n    }\r\n\r\n    handlerSearchButton(): void {\r\n        const url = `?search=${this.inputValue}&searchBy=${this.props.searchType}`;\r\n\r\n        http(CONSTANTS.URL_FILMS + url)\r\n            .then((res: MoviesResponse) => {\r\n                this.props.dispatch(getMovies([...res.data]));\r\n\r\n                this.props.dispatch(getUnsortedMovies([...res.data]));\r\n\r\n                if (this.props.sortType !== '') {\r\n                    this.props.dispatch(changeSortType(''));\r\n                }\r\n            })\r\n            .finally(() => this.props.dispatch(changeLoadingStatus(false)));\r\n    }\r\n\r\n    searchByTitle(): void {\r\n        this.props.dispatch(changeSearchType(CONSTANTS.SEARCH_BY_TITLE_STATE));\r\n    }\r\n\r\n    searchByGenre(): void {\r\n        this.props.dispatch(changeSearchType(CONSTANTS.SEARCH_BY_GENRE_STATE));\r\n    }\r\n\r\n    sortFunction(sortType: string): Movie[] | void {\r\n        if (sortType === CONSTANTS.SORT_BY_DATE) {\r\n            return this.props.movies.sort((a: any, b: any) => {\r\n                return (\r\n                    new Date(b.release_date).getTime() -\r\n                    new Date(a.release_date).getTime()\r\n                );\r\n            });\r\n        }\r\n        if (sortType === CONSTANTS.SORT_BY_RATING) {\r\n            return this.props.movies.sort((a: any, b: any) => {\r\n                return b.vote_average - a.vote_average;\r\n            });\r\n        }\r\n    }\r\n\r\n    sortBy(sortType: string): void {\r\n        if (this.props.sortType !== sortType) {\r\n            this.props.dispatch(changeSortType(sortType));\r\n\r\n            const movies = this.sortFunction(sortType);\r\n\r\n            this.props.dispatch(getMovies([...(movies as Movie[])]));\r\n        } else {\r\n            this.props.dispatch(changeSortType(''));\r\n\r\n            this.props.dispatch(getMovies([...this.props.unsortedMovies]));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <header className=\"header\">\r\n                    <div className=\"header__content\">\r\n                        <span className=\"header__app-name\">Movies</span>\r\n                        <span className=\"header__input-name\">\r\n                            Find your movie\r\n                        </span>\r\n                        <div className=\"header__input-field\">\r\n                            <input\r\n                                className=\"header__input\"\r\n                                type=\"text\"\r\n                                onChange={this.handlerInput}\r\n                            ></input>\r\n                        </div>\r\n                        <div className=\"header__buttons\">\r\n                            <span>SEARCH BY</span>\r\n                            <button\r\n                                className={\r\n                                    this.props.searchType === 'title'\r\n                                        ? 'button button_active'\r\n                                        : 'button'\r\n                                }\r\n                                onClick={() => this.searchByTitle()}\r\n                            >\r\n                                TITLE\r\n                            </button>\r\n                            <button\r\n                                className={\r\n                                    this.props.searchType === 'genres'\r\n                                        ? 'button button_active'\r\n                                        : 'button'\r\n                                }\r\n                                onClick={() => this.searchByGenre()}\r\n                            >\r\n                                GENRE\r\n                            </button>\r\n                            <div className=\"empty\"></div>\r\n                            <button\r\n                                className=\"button button_search\"\r\n                                onClick={() => this.handlerSearchButton()}\r\n                            >\r\n                                SEARCH\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </header>\r\n                <AmountAndSortPanel\r\n                    count={this.props.movies.length}\r\n                    sortBy={this.sortBy}\r\n                    sortType={this.props.sortType}\r\n                />\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: State) {\r\n    return {\r\n        searchType: state.searchType,\r\n        movies: state.movies,\r\n        unsortedMovies: state.unsortedMovies,\r\n        sortType: state.sortType,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Header);\r\n"]},"metadata":{},"sourceType":"module"}