{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anton\\\\Desktop\\\\React\\\\movies-react\\\\movies-react\\\\src\\\\containers\\\\films-content\\\\films-content.tsx\";\nimport React from 'react';\nimport './films-content.scss';\nimport { Film } from '../../components/film/film';\nimport { http } from '../../services/httpRequest';\nimport { connect } from 'react-redux';\nimport { getMovies, getUnsortedMovies, selectMovieId, selectedMovie, changeSortType, changeLoadingStatus } from '../../actions/movies-actions';\nimport { CONSTANTS } from '../../constants/constants';\nimport FlipMove from 'react-flip-move';\n\nfunction mapStateToProps(state) {\n  return {\n    movies: state.movies,\n    selectedMovie: state.selectedMovie\n  };\n}\n\nclass FilmsContent extends React.Component {\n  static getInitialProps({\n    store\n  }) {}\n\n  componentDidMount() {\n    if (!this.props.selectedMovie) {\n      http(CONSTANTS.URL_FILMS).then(res => {\n        this.props.dispatch(getMovies([...res.data]));\n        this.props.dispatch(getUnsortedMovies([...res.data]));\n      }).finally(() => this.props.dispatch(changeLoadingStatus(false)));\n    }\n  }\n\n  selectMovie(id) {\n    this.props.dispatch(changeSortType(''));\n    this.props.dispatch(selectMovieId(id));\n    const url = `/${id}`;\n    http(CONSTANTS.URL_FILMS + url).then(movie => {\n      this.props.dispatch(selectedMovie(movie));\n      const url = `?search=${movie.genres[0]}&searchBy=${CONSTANTS.SEARCH_BY_GENRE_STATE}`;\n      http(CONSTANTS.URL_FILMS + url).then(res => {\n        this.props.dispatch(getMovies([...res.data]));\n        this.props.dispatch(getUnsortedMovies([...res.data]));\n      });\n    }).finally(() => this.props.dispatch(changeLoadingStatus(false)));\n    const interval = setInterval(() => {\n      window.scrollBy(0, -70);\n\n      if (window.scrollY === 0) {\n        clearInterval(interval);\n      }\n    }, 1000 / 60);\n  }\n\n  render() {\n    if (this.props.movies.length > 0) {\n      return React.createElement(FlipMove, {\n        className: \"films-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, this.props.movies.map(movie => React.createElement(Film, {\n        key: movie.id.toString(),\n        movie: movie,\n        selectMovie: this.selectMovie.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      })));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"films-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"FILMS NOT FOUND\");\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps)(FilmsContent);","map":{"version":3,"sources":["C:/Users/Anton/Desktop/React/movies-react/movies-react/src/containers/films-content/films-content.tsx"],"names":["React","Film","http","connect","getMovies","getUnsortedMovies","selectMovieId","selectedMovie","changeSortType","changeLoadingStatus","CONSTANTS","FlipMove","mapStateToProps","state","movies","FilmsContent","Component","getInitialProps","store","componentDidMount","props","URL_FILMS","then","res","dispatch","data","finally","selectMovie","id","url","movie","genres","SEARCH_BY_GENRE_STATE","interval","setInterval","window","scrollBy","scrollY","clearInterval","render","length","map","toString","bind"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './films-content.scss';\r\nimport { Film } from '../../components/film/film';\r\nimport { http } from '../../services/httpRequest';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    getMovies,\r\n    getUnsortedMovies,\r\n    selectMovieId,\r\n    selectedMovie,\r\n    changeSortType,\r\n    changeLoadingStatus,\r\n} from '../../actions/movies-actions';\r\nimport { MoviesResponse } from '../../types/httpType';\r\nimport { Movie } from '../../types/movie';\r\nimport { State } from '../../types/state';\r\nimport { CONSTANTS } from '../../constants/constants';\r\nimport FlipMove from 'react-flip-move';\r\n\r\ninterface Props extends React.Props<any> {\r\n    movies: Movie[];\r\n    dispatch: (action: any) => any;\r\n    selectedMovie: Movie | null;\r\n}\r\n\r\nfunction mapStateToProps(state: State) {\r\n    return {\r\n        movies: state.movies,\r\n        selectedMovie: state.selectedMovie,\r\n    };\r\n}\r\n\r\nclass FilmsContent extends React.Component<Props> {\r\n\r\n    static getInitialProps({store}: any) {}\r\n\r\n    componentDidMount() {\r\n        if (!this.props.selectedMovie) {\r\n            http(CONSTANTS.URL_FILMS)\r\n                .then((res: MoviesResponse) => {\r\n                    this.props.dispatch(getMovies([...res.data]));\r\n                    this.props.dispatch(getUnsortedMovies([...res.data]));\r\n                })\r\n                .finally(() => this.props.dispatch(changeLoadingStatus(false)));\r\n        }\r\n    }\r\n\r\n    selectMovie(id: number) {\r\n        this.props.dispatch(changeSortType(''));\r\n        this.props.dispatch(selectMovieId(id));\r\n\r\n        const url = `/${id}`;\r\n        http(CONSTANTS.URL_FILMS + url)\r\n            .then((movie: Movie) => {\r\n                this.props.dispatch(selectedMovie(movie));\r\n\r\n                const url = `?search=${movie.genres[0]}&searchBy=${CONSTANTS.SEARCH_BY_GENRE_STATE}`;\r\n\r\n                http(CONSTANTS.URL_FILMS + url).then((res) => {\r\n                    this.props.dispatch(getMovies([...res.data]));\r\n                    this.props.dispatch(getUnsortedMovies([...res.data]));\r\n                });\r\n            })\r\n            .finally(() => this.props.dispatch(changeLoadingStatus(false)));\r\n\r\n        const interval = setInterval(() => {\r\n            window.scrollBy(0, -70);\r\n            if (window.scrollY === 0) {\r\n                clearInterval(interval);\r\n            }\r\n        }, 1000 / 60);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.movies.length > 0) {\r\n            return (\r\n                <FlipMove className=\"films-container\">\r\n                    {this.props.movies.map((movie: any) => (\r\n                        <Film\r\n                            key={movie.id.toString()}\r\n                            movie={movie}\r\n                            selectMovie={this.selectMovie.bind(this)}\r\n                        />\r\n                    ))}\r\n                </FlipMove>\r\n            );\r\n        } else {\r\n            return <div className=\"films-container\">FILMS NOT FOUND</div>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(FilmsContent);\r\n"]},"metadata":{},"sourceType":"module"}