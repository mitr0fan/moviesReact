{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anton\\\\Desktop\\\\React\\\\movies-react\\\\movies-react\\\\src\\\\pages\\\\movie\\\\index.tsx\";\nimport React from 'react';\nimport { getUnsortedMovies, changeLoadingStatus } from '../../actions/movies-actions';\nimport { connect } from 'react-redux';\nexport class MovieInfoPage extends React.Component {\n  static getInitialProps({\n    store,\n    query\n  }) {\n    console.log(query);\n  }\n\n  componentDidMount() {// if (!this.props.selectedMovie) {\n    //     const id = this.props.match.params.id;\n    //     http(CONSTANTS.URL_FILMS + `/${id}`)\n    //         .then((movie: Movie) => {\n    //             if (movie.title) {\n    //                 this.props.dispatch(selectedMovie(movie));\n    //                 const url = `?search=${movie.genres[0]}&searchBy=genres`;\n    //                 http(CONSTANTS.URL_FILMS + url).then(\n    //                     (res: MoviesResponse) => {\n    //                         this.props.dispatch(getMovies([...res.data]));\n    //                         this.props.dispatch(\n    //                             getUnsortedMovies([...res.data])\n    //                         );\n    //                     }\n    //                 );\n    //             }\n    //         })\n    //         .finally(() => this.props.dispatch(changeLoadingStatus(false)));\n    // }\n  }\n\n  backToMainPage() {\n    this.props.dispatch(changeLoadingStatus(false));\n    this.props.dispatch(getUnsortedMovies([...this.props.movies]));\n  }\n\n  render() {\n    // if (!isNaN(+this.props.match.params.id)) {\n    //     return (\n    //         <Fragment>\n    //             <MovieInfo\n    //                 backToMainPage={this.backToMainPage.bind(this)}\n    //                 selectedMovie={this.props.selectedMovie}\n    //             />\n    //             <FilmsContent />\n    //             <Footer />\n    //         </Fragment>\n    //     );\n    // } else {\n    //     return <PageNotFound />;\n    // }\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Hello\");\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    selectedMovie: state.selectedMovie,\n    movies: state.movies\n  };\n}\n\nexport default connect(mapStateToProps)(MovieInfoPage);","map":{"version":3,"sources":["C:/Users/Anton/Desktop/React/movies-react/movies-react/src/pages/movie/index.tsx"],"names":["React","getUnsortedMovies","changeLoadingStatus","connect","MovieInfoPage","Component","getInitialProps","store","query","console","log","componentDidMount","backToMainPage","props","dispatch","movies","render","mapStateToProps","state","selectedMovie"],"mappings":";AAAA,OAAOA,KAAP,MAAgC,OAAhC;AAQA,SAGIC,iBAHJ,EAIIC,mBAJJ,QAKO,8BALP;AAOA,SAASC,OAAT,QAAwB,aAAxB;AAaA,OAAO,MAAMC,aAAN,SAA4BJ,KAAK,CAACK,SAAlC,CAA4D;AAE/D,SAAOC,eAAP,CAAuB;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAvB,EAA4C;AACxCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;;AAEDG,EAAAA,iBAAiB,GAAS,CACtB;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDC,EAAAA,cAAc,GAAS;AACnB,SAAKC,KAAL,CAAWC,QAAX,CAAoBZ,mBAAmB,CAAC,KAAD,CAAvC;AACA,SAAKW,KAAL,CAAWC,QAAX,CAAoBb,iBAAiB,CAAC,CAAC,GAAG,KAAKY,KAAL,CAAWE,MAAf,CAAD,CAArC;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACH;;AAnD8D;;AAsDnE,SAASC,eAAT,CAAyBC,KAAzB,EAA8C;AAC1C,SAAO;AACHC,IAAAA,aAAa,EAAED,KAAK,CAACC,aADlB;AAEHJ,IAAAA,MAAM,EAAEG,KAAK,CAACH;AAFX,GAAP;AAIH;;AAED,eAAeZ,OAAO,CAACc,eAAD,CAAP,CAAyBb,aAAzB,CAAf","sourcesContent":["import React, { Fragment } from 'react';\r\nimport { MovieInfo } from '../../components/movie-info/movie-info';\r\nimport FilmsContent from '../films-content/films-content';\r\nimport { Footer } from '../../components/footer/footer';\r\nimport { PageNotFound } from '../../components/page-not-found/page-not-found';\r\nimport { http } from '../../services/httpRequest';\r\nimport { CONSTANTS } from '../../constants/constants';\r\nimport { Movie } from '../../types/movie';\r\nimport {\r\n    selectedMovie,\r\n    getMovies,\r\n    getUnsortedMovies,\r\n    changeLoadingStatus,\r\n} from '../../actions/movies-actions';\r\nimport { MoviesResponse } from '../../types/httpType';\r\nimport { connect } from 'react-redux';\r\nimport { State } from '../../types/state';\r\n\r\ninterface Props {\r\n    selectedMovie: Movie;\r\n    movies: Movie[];\r\n}\r\n\r\ninterface PropsWithMatch extends Props {\r\n    match: any;\r\n    dispatch: (action: any) => void;\r\n}\r\n\r\nexport class MovieInfoPage extends React.Component<PropsWithMatch> {\r\n\r\n    static getInitialProps({store, query}: any) {\r\n        console.log(query)\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        // if (!this.props.selectedMovie) {\r\n        //     const id = this.props.match.params.id;\r\n\r\n        //     http(CONSTANTS.URL_FILMS + `/${id}`)\r\n        //         .then((movie: Movie) => {\r\n        //             if (movie.title) {\r\n        //                 this.props.dispatch(selectedMovie(movie));\r\n\r\n        //                 const url = `?search=${movie.genres[0]}&searchBy=genres`;\r\n\r\n        //                 http(CONSTANTS.URL_FILMS + url).then(\r\n        //                     (res: MoviesResponse) => {\r\n        //                         this.props.dispatch(getMovies([...res.data]));\r\n        //                         this.props.dispatch(\r\n        //                             getUnsortedMovies([...res.data])\r\n        //                         );\r\n        //                     }\r\n        //                 );\r\n        //             }\r\n        //         })\r\n        //         .finally(() => this.props.dispatch(changeLoadingStatus(false)));\r\n        // }\r\n    }\r\n\r\n    backToMainPage(): void {\r\n        this.props.dispatch(changeLoadingStatus(false));\r\n        this.props.dispatch(getUnsortedMovies([...this.props.movies]));\r\n    }\r\n    render() {\r\n        // if (!isNaN(+this.props.match.params.id)) {\r\n        //     return (\r\n        //         <Fragment>\r\n        //             <MovieInfo\r\n        //                 backToMainPage={this.backToMainPage.bind(this)}\r\n        //                 selectedMovie={this.props.selectedMovie}\r\n        //             />\r\n        //             <FilmsContent />\r\n        //             <Footer />\r\n        //         </Fragment>\r\n        //     );\r\n        // } else {\r\n        //     return <PageNotFound />;\r\n        // }\r\n        return <div>Hello</div>\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: State): Props {\r\n    return {\r\n        selectedMovie: state.selectedMovie as Movie,\r\n        movies: state.movies,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(MovieInfoPage);\r\n"]},"metadata":{},"sourceType":"module"}